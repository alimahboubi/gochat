// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user-service/domain/interfaces/user_domain_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	valueobjects "github.com/alimahboubi/gochat/internal/user-service/domain/valueobjects"
	gomock "github.com/golang/mock/gomock"
)

// MockUserDomainService is a mock of UserDomainService interface.
type MockUserDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockUserDomainServiceMockRecorder
}

// MockUserDomainServiceMockRecorder is the mock recorder for MockUserDomainService.
type MockUserDomainServiceMockRecorder struct {
	mock *MockUserDomainService
}

// NewMockUserDomainService creates a new mock instance.
func NewMockUserDomainService(ctrl *gomock.Controller) *MockUserDomainService {
	mock := &MockUserDomainService{ctrl: ctrl}
	mock.recorder = &MockUserDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDomainService) EXPECT() *MockUserDomainServiceMockRecorder {
	return m.recorder
}

// IsEmailUnique mocks base method.
func (m *MockUserDomainService) IsEmailUnique(email *valueobjects.Email) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailUnique", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailUnique indicates an expected call of IsEmailUnique.
func (mr *MockUserDomainServiceMockRecorder) IsEmailUnique(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailUnique", reflect.TypeOf((*MockUserDomainService)(nil).IsEmailUnique), email)
}

// ValidateUserRegistration mocks base method.
func (m *MockUserDomainService) ValidateUserRegistration(email *valueobjects.Email, password *valueobjects.Password, firstName, lastName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserRegistration", email, password, firstName, lastName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUserRegistration indicates an expected call of ValidateUserRegistration.
func (mr *MockUserDomainServiceMockRecorder) ValidateUserRegistration(email, password, firstName, lastName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserRegistration", reflect.TypeOf((*MockUserDomainService)(nil).ValidateUserRegistration), email, password, firstName, lastName)
}
